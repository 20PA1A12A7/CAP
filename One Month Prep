#WEEK1
1)PLUS MINUS
#!/bin/python3
import math
import os
import random
import re
import sys
def plusMinus(arr):
    count1,count2,count3=0,0,0
    for i in range(n):
        if(arr[i]>0):
            count1=count1+1
        if(arr[i]<0):
            count2=count2+1
        if(arr[i]==0):
            count3=count3+1 
    print(count1/n)
    print(count2/n)
    print(count3/n)
if __name__ == '__main__':
      n = int(input().strip())
      arr = list(map(int, input().rstrip().split()))
      plusMinus(arr)
      
2)MINI-MAX SUM
#!/bin/python3
import math
import os
import random
import re
import sys
def miniMaxSum(arr):
    sum1=0
    sum2=0
    arr.sort()
    for i in range(0,4):
        sum1=sum1+arr[i]
    for i in range(1,5):
        sum2=sum2+arr[i] 
    print(sum1,sum2)  
if __name__ == '__main__':
      arr = list(map(int, input().rstrip().split()))
      miniMaxSum(arr)
      
3)TIME CONVERSION
import math
import os
import random
import re
import sys
def timeConversion(s):
    p=s[:-2]
    p1=p[:2] 
    c=str(int(p1)+12)
    d=str(int(p1)-12)
    if(s[-2:]=="PM" and p[:2]!="12"):
        return p.replace(p1,c) 
    elif(s[-2:]=="AM" and p[:2]=="12"):
        return p.replace(p1,d+"0")
    else:
        return p
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    s = input()
    result = timeConversion(s)
    fptr.write(result+'\n')
    fptr.close()

4)SPARSE ARRAYS
import math
import os
import random
import re
import sys
def matchingStrings(strings, queries):
   l=[]
   for i in queries:
    if i in strings:
        l1=strings.count(i)
        l.append(l1)
    else:
        l1=0
        l.append(l1)
   return l
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    strings_count = int(input().strip())
    strings = []
    for _ in range(strings_count):
        strings_item = input()
        strings.append(strings_item)
    queries_count = int(input().strip())
    queries = []
    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)
    res = matchingStrings(strings, queries)
    fptr.write('\n'.join(map(str, res)))
    fptr.write('\n')
    fptr.close()

5)LONELY INTEGER
#!/bin/python3
import math
import os
import random
import re
import sys
def lonelyinteger(a):
     a.sort()
     for i in a:
        if(a.count(i)==1):
            c=i
     return c
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    a = list(map(int, input().rstrip().split()))
    result = lonelyinteger(a)
    fptr.write(str(result) + '\n')
    fptr.close() 
 
6)FLIPPING BITS
import math
import os
import random
import re
import sys
def flippingBits(n):
  l=[]
  while(n>1):
    l.append(n%2)
    n=n//2 
  l.append(n)
  c=32-len(l) 
  l1=str([0]*c+l[::-1])  
  l1=l1.replace(',','')
  l1=l1.replace(' ','')
  l1=l1.replace('[','')
  l1=l1.replace(']','') 
  res=''
  for i in l1:
    if(i=='0'):
       res=res+'1'
    else:
       res=res+'0' 
  s=list(res) 
  s1=[int(i) for i in s] 
  for i in range(32):
    s1[i]=s1[i]*(2**(31-i))
  return sum(s1)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input().strip())
    for q_itr in range(q):
        n = int(input().strip())
        result = flippingBits(n)
        fptr.write(str(result) + '\n')
    fptr.close()

7)DIAGONAL DIFFERENCE
#!/bin/python3
import math
import os
import random
import re
import sys
def diagonalDifference(arr):
    sum1,sum2=0,0
    for i in range(n):
        for j in range(n):
            if(i==j):
                sum1=sum1+arr[i][j]
            if(i+j==n-1):
                sum2=sum2+arr[i][j]
    return(abs(sum1-sum2))
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = []
    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))
    result = diagonalDifference(arr)
    fptr.write(str(result) + '\n')
    fptr.close()

8)COUNTING SORT 1
import math
import os
import random
import re
import sys
def countingSort(arr):
    l=[]
    l1=[]
    for i in range(100):
        l.append(i)
    for i in l:
        if i in arr:
            x=arr.count(i)
            l1.append(x)
        else:
            l1.append(0)
    return l1     
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = countingSort(arr)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()

9)PANGRAMS
#!/bin/python3
import math
import os
import random
import re
import sys
def pangrams(s):
    s=s.replace(' ','')
    s=s.lower()
    a=[]
    for i in s:
        if i not in a:
            a.append(i)
    if(len(a)==26):
        print("pangram")
    else:
        print("not pangram")
if __name__ == '__main__':
    s = input()
    pangrams(s)
    
10)PERMUTING TWO ARRAYS
import math
import os
import random
import re
import sys
def twoArrays(k, A, B): 
    A.sort()
    B.sort()
    c=B[::-1] 
    count=0
    for i in range(n):
        if(A[i]+c[i]>=k):
            count=count+1
    if(count==n):
        return 'YES'
    else:
        return 'NO'
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input().strip())
    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()
        n = int(first_multiple_input[0])
        k = int(first_multiple_input[1])
        A = list(map(int, input().rstrip().split()))
        B = list(map(int, input().rstrip().split()))
        result = twoArrays(k, A, B)
        fptr.write(result + '\n')
    fptr.close()

11)SUBARRAY DIVISION 1
#!/bin/python3
import math
import os
import random
import re
import sys
def birthday(s, d, m):
    count=0
    for i in range(n-m+1):
       if(sum(s[i:i+m])==d):
          count=count+1
    return(count)     
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    s = list(map(int, input().rstrip().split()))
    first_multiple_input = input().rstrip().split()
    d = int(first_multiple_input[0])
    m = int(first_multiple_input[1])
    result = birthday(s, d, m)
    fptr.write(str(result) + '\n')
    fptr.close()

12)XOR STRINGS 2
def strings_xor(s, t):
    res = ""
    for i in range(len(s)):
        if s[i] == t[i]:
            res = res+'0'
        else:
            res = res+'1'
    return res
s = input()
t = input()
print(strings_xor(s, t))

##MOCK TEST 

1)FIND THE MEDIAN 
import math
import os
import random
import re
import sys
def findMedian(arr):
    arr.sort() 
    l=(n)//2
    return arr[l]
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = findMedian(arr)
    fptr.write(str(result) + '\n')
    fptr.close() 
    
2)FLIPPING THE MATRIX 
import math
import os
import random
import re
import sys
def flippingMatrix(matrix):
    n=len(matrix)
    res=0
    for i in range(n//2): 
        for j in range(n//2):
            res=res+max(matrix[i][j],matrix[i][n-j-1],matrix[n-i-1][j],matrix[n-i-1][n-j-1])
    return res       
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input().strip())
    for q_itr in range(q):
        n = int(input().strip())
        matrix = []
        for _ in range(2 * n):
            matrix.append(list(map(int, input().rstrip().split())))
        result = flippingMatrix(matrix)
        fptr.write(str(result) + '\n')
    fptr.close()

##WEEK 2

1)SALES BY MATCH
import math
import os
import random
import re
import sys
def sockMerchant(n, ar):
   l=[] 
   sum=0
   ar.sort() 
   for i in list(set(ar)):
      x=ar.count(i)  
      l.append(x)  
   for i in l:
    sum=sum+i//2
   return sum
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    ar = list(map(int, input().rstrip().split()))
    result = sockMerchant(n, ar)
    fptr.write(str(result) + '\n')
    fptr.close() 
    
2)ZIG ZAG SEQUENCE
def findZigZagSequence(a, n):
   a.sort()
   mid = int((n - 1)/2)
   a[mid], a[n-1] = a[n-1], a[mid]
   st = mid + 1
   ed = n - 2
   while(st <= ed):
       a[st], a[ed] = a[ed], a[st]
       st = st + 1
       ed = ed - 1

   for i in range (n):
       if i == n-1:
           print(a[i])
       else:
           print(a[i], end = ' ')
   return
test_cases = int(input())
for cs in range (test_cases):
    n = int(input())
    a = list(map(int, input().split()))
    findZigZagSequence(a, n)

3)DRAWING BOOK
import math
import os
import random
import re
import sys
def pageCount(n, p):
    k1=p-1
    k2=n-p
    if(k1<k2):
        return math.ceil(k1/2) 
    else: 
        if(n%2!=0 and n-1==p):
            return 0
        if(n%2==0):
          return math.ceil(k2/2)
        return k2//2

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    p = int(input().strip())
    result = pageCount(n, p)
    fptr.write(str(result) + '\n')
    fptr.close()

4)TOWER BREAKERS
import math
import os
import random
import re
import sys
def towerBreakers(n, m): 
    if(n%2==0 or n%2!=0 and m==1):
        return 2
    else:
        return 1
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input().strip())
    for t_itr in range(t):
        first_multiple_input = input().rstrip().split()
        n = int(first_multiple_input[0])
        m = int(first_multiple_input[1])
        result = towerBreakers(n, m)
        fptr.write(str(result) + '\n')
    fptr.close() 
    
9)PRIME DATES
import re
month = []
def updateLeapYear(year):
    if year % 400 == 0:
        month[2] = 29
    elif year % 100 == 0:
        month[2] = 28
    elif year % 4 == 0:
        month[2] = 29
    else:
        month[2] = 28
def storeMonth():
    month[1] = 31
    month[2] = 28
    month[3] = 31
    month[4] = 30
    month[5] = 31
    month[6] = 30
    month[7] = 31
    month[8] = 31
    month[9] = 30
    month[10] = 31
    month[11] = 30
    month[12] = 31
def findPrimeDates(d1, m1, y1, d2, m2, y2):
    storeMonth()
    result = 0
    while(True):
        x = d1
        x = x * 100 + m1
        x = x * 10000 + y1
        if x % 4 == 0 or x % 7 == 0:
            result = result + 1
        if d1 == d2 and m1 == m2 and y1 == y2:
            break
        updateLeapYear(y1)
        d1 = d1 + 1
        if d1 > month[m1]:
            m1 = m1 + 1
            d1 = 1
            if m1 > 12:
                y1 =  y1 + 1
                m1 = 1
    return result;
for i in range(1, 15):
    month.append(31)
line = input()
date = re.split('-| ', line)
d1 = int(date[0])
m1 = int(date[1])
y1 = int(date[2])
d2 = int(date[3])
m2 = int(date[4])
y2 = int(date[5])
result = findPrimeDates(d1, m1, y1, d2, m2, y2)
print(result)






      

